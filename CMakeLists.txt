# LDoom
# Copyright 2015-2016 Calvin Rose

cmake_minimum_required(VERSION 2.8)
project(Ldoom)

# Options
option(LDOOMC_DEBUG "Debug build (on) or release build (off)." ON)
option(LDOOMC_AMALG "Build all c files together. Might make binary more efficient, or might not work at all." OFF)

# Set Some Variables
set(TARGET_NAME ${PROJECT_NAME})
if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set (CMAKE_C_FLAGS "--std=gnu99 ${CMAKE_C_FLAGS}")
    endif ()
else ()
    set (CMAKE_C_STANDARD 99)
endif ()

set(SOURCES
src/main.c
src/audio.c
src/platform.c
src/util.c
src/ldmath.c
src/shader.c
src/mesh.c
src/texture.c
src/camera.c
src/fntdraw.c
src/quickdraw.c
src/scene.c
src/mob.c
src/model.c
src/console.c
src/sky.c
src/glad.c
src/luainterop.c
## Thirdparty static libs
src/stb_vorbis.c
)

# TODO: Auto-generate the c file used to make the amlagamated build.
if(${LDOOMC_AMALG})
    set(amalg_file "${CMAKE_CURRENT_BINARY_DIR}/amalg.c")
    file(WRITE ${amalg_file} "// Autogenerated by Cmake. Do Not Edit.\n")
    foreach(source_file ${SOURCES})
        string(REPLACE "src/" "" source_file ${source_file})
        file(APPEND ${amalg_file} "#include \"${source_file}\"\n")
    endforeach()
    set(SOURCES ${amalg_file})
endif(${LDOOMC_AMALG})

include_directories(src)

## Game resources
set(RESOURCES
resources/basic.glsl
resources/diffuseshader.glsl
resources/consolefont.png
resources/consolefont.txt
resources/hud.png
resources/hud.txt
resources/sky.glsl
resources/diffuse.png
resources/reflectshader.glsl
resources/skytop.png
resources/skybottom.png
resources/skyleft.png
resources/skyright.png
resources/skyfront.png
resources/skyback.png
resources/floortile.png
resources/snd.ogg
## Scripts
resources/scripts/bootstrap.lua
)

# Build the executable
if(CMAKE_BUILD_TYPE EQUAL "Release")
    if(APPLE)
        # Create an app bundle for apple
        set(ICON_FILE ${CMAKE_CURRENT_SOURCE_DIR}/osx/icon.icns)
        set(MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/osx/Info.plist)
        set(MACOSX_BUNDLE_BUNDLE_NAME ${TARGET_NAME})
        set(MACOSX_BUNDLE_ICON_FILE icon.icns)
        set_source_files_properties(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
        # Add each resource to resources bundle in the app
        foreach(res ${RESOURCES})
            get_filename_component(resdir ${res} DIRECTORY)
            string(REPLACE "resources" "" resdir ${resdir})
            set_source_files_properties(${res} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/${resdir}")
        endforeach(res)
        # Make the executable
        add_executable(${TARGET_NAME} MACOSX_BUNDLE ${ICON_FILE} ${SOURCES} ${RESOURCES})
        set_target_properties(${TARGET_NAME} PROPERTIES MACOSX_BUNDLE TRUE)
        # Link any OSX specific frameworks
        target_link_libraries(${TARGET_NAME} "-framework CoreFoundation")
    else()
        message(FATAL_ERROR "Release build not yet implemented for this platform.")
    endif()
else()
    set(CMAKE_BUILD_TYPE "Debug")
    add_executable(${TARGET_NAME} ${SOURCES})
endif()

# LuaJIT Compilation using external build system.
# (make on Mac and linux, and custom build script on Windows)
set(LUAJIT_LIB ${CMAKE_SOURCE_DIR}/luajit/src/libluajit.a)
add_custom_target(libluajit DEPENDS ${LUAJIT_LIB})
add_dependencies(${TARGET_NAME} libluajit)
add_custom_command(
    OUTPUT ${LUAJIT_LIB}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/luajit/src
    COMMAND make amalg
    VERBATIM
)
if(APPLE)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pagezero_size 10000 -image_base 100000000")
endif(APPLE)

# Add custom flags
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -s -DRELEASE -O3 -ffast-math -fno-math-errno -Wno-unused-parameter")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG -Wall -Wextra -ffast-math -fno-math-errno -Wno-unused-parameter")

# Include Library Headers and set up linking
add_subdirectory("glfw")
find_package(OpenGL REQUIRED)
find_package(OpenAL REQUIRED)
include_directories("glfw/include" "luajit/src" ${OPENAL_INCLUDE_DIR})
target_link_libraries(
    ${TARGET_NAME}
    ${LUAJIT_LIB}
    glfw
    ${GLFW_LIBRARIES}
    ${OPENGL_gl_LIBRARY}
    ${OPENAL_LIBRARY}
)
